// Typescript এর generic: কী, কেন, এবং কীভাবে ব্যবহার করবেন?
// টাইপস্ক্রিপ্ট এর একটি পাওয়ারফুল টুল হচ্ছে  Generics।
// টাইপ-সেফ জেনেরিক তৈরি করতে, আপনাকে টাইপ প্যারামিটার ব্যবহার করতে হবে। টাইপ প্যারামিটারগুলি T বা <T> দ্বারা সংজ্ঞায়িত করা হয়। এগুলি ক্লাস, ইন্টারফেস এবং ফাংশনে পাস করা প্যারামিটারের ডেটা টাইপকে বোঝায়।
// জেনেরিকের সাহায্যে আপনি ডাইনামিক এবং পুনর্ব্যবহারযোগ্য জেনেরিক কোড ব্লক লিখতে পারেন।
// জেনারিকস কী?
// জেনারিকস হলো একটি টাইপ প্যারামিটার যা একটি অজানা টাইপকে প্রতিনিধিত্ব করে। সহজ কথায় এটি অনেকটা ফাংশনের মতো। ফাংশনের আমরা যেমন প্যারামিটার হিসাবে যেকোন ডাটা পাস করতে পারি, ঠিক তেমনি টাইপস্ক্রিপ্ট এর জেনেরিকের প্যারামিটার হিসাবে আমরা টাইপ পাস করতে পারি। এবং সেই টাইপ এর উপর ভিত্তি করে বিভিন্ন অপারেশন পরিচালনা করতে পারি।
// Generics কেন ব্যাবহার করবেন?
// কোডের reusability বৃদ্ধি করতে: একটি জেনেরিক টাইপ আপনি বিভিন্ন ধরনের ডেটার টাইপ হিসাবে ব্যাবহার করতে পারবেন। সেক্ষেত্রে আপনাকে বারবার একই টাইপ লিখতে হবে না।
// টাইপ ত্রুটিগুলি সহজে সনাক্ত করতে: জেনারিকস এর মাধ্যমে আপনি সহজে কোডের ভুল গুলি শনাক্ত করতে পারবেন, এতে কোডে ভুল হওয়ার সম্ভাবনা অনেক কমে যাবে।
// কোড readable এবং Maintainable করতে : জেনারিকস ব্যাবহারের ফলে কোডের readability বৃদ্ধি পায় এবং কোড সহজে রক্ষণাবেক্ষণ করা যায়।
// জেনারিকস ব্যবহার করার কিছু সাধারণ উদাহরণ:
// জেনেরিক ফাংশন
// function printData<T>(data: T): void {
//     console.log(data);
// }
// printData<string>("Hello, TypeScript!"); // Hello, TypeScript!
// printData<number>(42); // 42
// printData<number[]>([1, 2, 3]); // [1, 2, 3]
// এই উদাহরণে, আমরা একটি জেনেরিক ফাংশন printData() তৈরি করেছি যা যেকোন ডেটা টাইপের মান গ্রহণ করতে পারে। আমরা printData() ফাংশনে string, number, এবং number[] ডেটা টাইপ পাস করেছি।
// জেনেরিক ইন্টারফেস
// interface Pair<T, U> {
//     first: T;
//     second: U;
// }
// const person: Pair<string, number> = { first: "John", second: 30 };
// console.log(person.first); // John
// console.log(person.second); // 30
// const coordinates: Pair<number, number> = { first: 10, second: 20 };
// console.log(coordinates.first); // 10
// console.log(coordinates.second); // 20
// এই উদাহরণে, আমরা একটি জেনেরিক ইন্টারফেস Pair() তৈরি করেছি যা দুটি ডেটা টাইপের মান গ্রহণ করতে পারে। আমরা Pair() ইন্টারফেস ব্যবহার করে string এবং number ডেটা টাইপের একটি অবজেক্ট তৈরি করেছি।
// জেনেরিক ক্লাস
// class Box<T> {
//     private value: T;
//     constructor(initialValue: T) {
//         this.value = initialValue;
//     }
//     getValue(): T {
//         return this.value;
//     }
// }
// const numberBox = new Box<number>(42);
// console.log(numberBox.getValue()); // 42
// const stringBox = new Box<string>("Hello, TypeScript");
// console.log(stringBox.getValue()); // Hello, TypeScript
// এই উদাহরণে, আমরা একটি জেনেরিক ক্লাস Box() তৈরি করেছি যা যেকোন ডেটা টাইপের মান গ্রহণ করতে পারে। আমরা Box() ক্লাস ব্যবহার করে number এবং string ডেটা টাইপের দুটি অবজেক্ট তৈরি করেছি।
// উপরোক্ত প্রতিটি উদাহরনে আমরা জেনেরিক ইউজ করেছি, যেখানে প্যারামিটার আকারে টাইপ গুলো পাস করা হয়েছে। এবং একই জেনেরিকে আমরা বিভিন্ন ধরনের ডাটা পাঠিয়েছি। এখানে ডাইনামিক ভাবে টাইপ সেফটি কাজ করছে।
// জেনারিকস টাইপস্ক্রিপ্টের শুধু মাত্র একটি শক্তিশালী টাইপ টুল ই নয়, এর মাধ্যমে আপনি Don’t-Repeat-Yourself (DRY) এর মতো গুরুত্বপূর্ণ প্রিন্সিপল ফলো করতে পারবেন।
// Let’s code your career!